---
import { clients, servers, plans, settings } from "@/database/index";
import profile from "@/utils/profile";
import type { Clients } from "@/database/entities/Clients";
import { serverStatus, serverStatusName } from "@/utils/status";

const cookie: string = `${Astro.cookies.get("_SECURE_SESSION_TOKEN_")?.value}`;
const c = profile(cookie);

let client: Clients | null = null;
if (c.success === true && c.clientId !== null) {
  client = await clients.findOneBy({ id: c.clientId });
}

const serversData = await servers.find({
  where: { clientId: client?.id },
  order: { updatedAt: "DESC" },
});

const panelUrl = await settings.findOneBy({ key: "panel_url" });
---

<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Active Servers</h3>
                <div class="card-tools">
                    <a href={new URL(String(panelUrl)).toString()} class="btn btn-default btn-sm" target="_blank"
                        >View in Panel <i class="fas fa-arrow-circle-right"></i></a
                    >
                    <button type="button" class="btn btn-tool" data-card-widget="collapse"><i class="fas fa-minus"></i></button>
                </div>
            </div>
            <div class="card-body table-responsive p-0">
                <table class="table table-hover text-nowrap">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Plan</th>
                            <th>Server Name</th>
                            <th>RAM (MB)</th>
                            <th>CPU (%)</th>
                            <th>Disk (MB)</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            serversData.filter((server) => server.status === serverStatus.active).map(async (server) => {
                                const serverPlan = server.planId ? await plans.findOneBy({ id: server.planId }) : undefined;
                                return (
                                    <tr>
                                        <td><a href={`/client/servers/${server.id}`}>{server.id}</a></td>
                                        <td>{serverPlan?.name}</td>
                                        <td>{server.serverName}</td>
                                        <td>{serverPlan?.ram}</td>
                                        <td>{serverPlan?.cpu}</td>
                                        <td>{serverPlan?.disk}</td>
                                        <td><span><span class={`badge ${server.status === serverStatus.active ? "bg-success" : server.status === serverStatus.suspended ? "bg-warning" : "bg-danger"}`}>{serverStatusName[server.status]}</span></span></td>
                                    </tr>
                                )
                            })
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <div class="col-lg-6">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Pending Servers</h3>
                <div class="card-tools">
                    <button type="button" class="btn btn-tool" data-card-widget="collapse"><i class="fas fa-minus"></i></button>
                </div>
            </div>
            <div class="card-body table-responsive p-0">
                <table class="table table-hover text-nowrap">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Plan</th>
                            <th>Server Name</th>
                            <th>Order Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            serversData.filter((server) => server.status === serverStatus.pending).map(async (server) => {
                                const serverPlan = server.planId ? await plans.findOneBy({ id: server.planId }) : undefined;
                                return (
                                    <tr>
                                        <td><a href={`/client/servers/${server.id}`}>{server.id}</a></td>
                                        <td>{serverPlan?.name}</td>
                                        <td>{server.serverName}</td>
                                        <td>{server.createdAt?.toLocaleDateString()} - {server.createdAt?.toLocaleTimeString(undefined, { hour: '2-digit', minute: '2-digit', hour12: false })}</td>
                                    </tr>
                                )
                            })
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Canceled Servers</h3>
                <div class="card-tools">
                    <button type="button" class="btn btn-tool" data-card-widget="collapse"><i class="fas fa-minus"></i></button>
                </div>
            </div>
            <div class="card-body table-responsive p-0">
                <table class="table table-hover text-nowrap">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Plan</th>
                            <th>Server Name</th>
                            <th>Cancellation Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            serversData.filter((server) => server.status === serverStatus.cancelled).map(async (server) => {
                                const serverPlan = server.planId ? await plans.findOneBy({ id: server.planId }) : undefined;
                                return (
                                    <tr>
                                        <td><a href={`/client/servers/${server.id}`}>{server.id}</a></td>
                                        <td>{serverPlan?.name}</td>
                                        <td>{server.serverName}</td>
                                        <td>{server.updatedAt?.toLocaleDateString()} - {server.updatedAt?.toLocaleTimeString(undefined, { hour: '2-digit', minute: '2-digit', hour12: false })}</td>
                                    </tr>
                                )
                            })
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <div class="col-lg-6">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Suspended Servers</h3>
                <div class="card-tools">
                    <button type="button" class="btn btn-tool" data-card-widget="collapse"><i class="fas fa-minus"></i></button>
                </div>
            </div>
            <div class="card-body table-responsive p-0">
                <table class="table table-hover text-nowrap">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Plan</th>
                            <th>Server Name</th>
                            <th>Suspension Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            serversData.filter((server) => server.status === serverStatus.suspended).map(async (server) => {
                                const serverPlan = server.planId ? await plans.findOneBy({ id: server.planId }) : undefined;
                                return (
                                    <tr>
                                        <td><a href={`/client/servers/${server.id}`}>{server.id}</a></td>
                                        <td>{serverPlan?.name}</td>
                                        <td>{server.serverName}</td>
                                        <td>{server.updatedAt?.toLocaleDateString()} - {server.updatedAt?.toLocaleTimeString(undefined, { hour: '2-digit', minute: '2-digit', hour12: false })}</td>
                                    </tr>
                                )
                            })
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Terminated Servers</h3>
                <div class="card-tools">
                    <button type="button" class="btn btn-tool" data-card-widget="collapse"><i class="fas fa-minus"></i></button>
                </div>
            </div>
            <div class="card-body table-responsive p-0">
                <table class="table table-hover text-nowrap">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Plan</th>
                            <th>Server Name</th>
                            <th>Termination Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            serversData.filter((server) => server.status === serverStatus.terminated).map(async (server) => {
                                const serverPlan = server.planId ? await plans.findOneBy({ id: server.planId }) : undefined;
                                return (
                                    <tr>
                                        <td><a href={`/client/servers/${server.id}`}>{server.id}</a></td>
                                        <td>{serverPlan?.name}</td>
                                        <td>{server.serverName}</td>
                                        <td>{server.updatedAt?.toLocaleDateString()} - {server.updatedAt?.toLocaleTimeString(undefined, { hour: '2-digit', minute: '2-digit', hour12: false })}</td>
                                    </tr>
                                )
                            })
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
